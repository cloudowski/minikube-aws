- hosts: localhost
  connection: local
  gather_facts: false
  vars:
    ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'

  tasks:

  - name: Determine my public ip
    command: curl ifconfig.co
    register: my_ip
    check_mode: no
  
  - name: Create terraform vars (minikube.auto.tfvars)
    copy:
      dest: "{{ playbook_dir }}/minikube.auto.tfvars"
      content: |
        access_ip = "{{ my_ip.stdout }}/32"

  - name: Terraform plan
    terraform:
        project_path: "{{ playbook_dir }}"
        state: planned
        plan_file: minikube.plan

  - name: Terraform apply
    terraform:
        project_path: "{{ playbook_dir }}"
        plan_file: minikube.plan
    register: tfout

  - set_fact:
      minikube_dns: "{{ tfout.outputs.instance_public_dns.value }}"

  - debug: var=minikube_dns

  - name: Waiting for ec2 to start
    wait_for: host="{{ minikube_dns }}" port=22 delay=3 timeout=300

  - name: Start minikube
    shell: |
        set -e
        minikube config set vm-driver none
        minikube status|grep -q 'host: Running' && exit 0
        minikube start --apiserver-names={{ minikube_dns }}
        # enable some addons
        minikube addons enable ingress
    delegate_to: "{{ minikube_dns }}"
    remote_user: ubuntu
    become: true
    register: minikube_start
    until: minikube_start is succeeded
    retries: 90
    delay: 2

  - name: Wait for apiserver to start
    shell: |
        minikube status --format "{{ '{{' }}.ApiServer{{ '}}' }}"|grep -q Running
    delegate_to: "{{ minikube_dns }}"
    remote_user: ubuntu
    become: true
    register: apiserver_status
    until: apiserver_status is succeeded
    retries: 150
    delay: 2


  - name: Generate kubeconfig
    shell: |
        export KUBECONFIG=/tmp/kubeconfig.aws
        kubectl config set-cluster minikube --embed-certs --certificate-authority=/root/.minikube/ca.crt --server=https://{{ minikube_dns }}:8443
        kubectl config set-credentials minikube --embed-certs --client-certificate=/root/.minikube/client.crt --client-key=/root/.minikube/client.key
        kubectl config set-context minikube --cluster=minikube --user=minikube
        kubectl config use-context minikube
    delegate_to: "{{ minikube_dns }}"
    remote_user: ubuntu
    become: true

  - name: Copy kubeconfig
    fetch:
        src: /tmp/kubeconfig.aws
        dest: ./kubeconfig.aws
        flat: true
    delegate_to: "{{ minikube_dns }}"
    remote_user: ubuntu
    become: true

  - name: Display connection instructions
    vars:
        msg: |
            Now configure your kubectl in order to access your minikube instance:"],
            
            export KUBECONFIG={{ playbook_dir }}/kubeconfig.aws
           
    debug:
        msg: "{{ msg.split('\n') }}"



